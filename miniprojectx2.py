# -*- coding: utf-8 -*-
"""miniprojectX2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1elAhDXaBD32tDm5wI9xvtYuBwicdGobk
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import plotly as py
import plotly.graph_objs as go

from sklearn.cluster import KMeans

df=pd.read_csv('/content/Mall_Customers.csv')
df.head()





df.describe()

df.dtypes

df.isnull().sum()

plt.pie(df.Gender.value_counts(), labels = ['Female', 'Male'], autopct ="%.01f%%")
plt.title('Percentages of Male and Females' );

male = df[df.Gender == "Male"]["Age"]
female = df[df.Gender != "Male"]['Age']

plt.figure(figsize = (10,4))
plt.subplot(1,2,1)
sns.histplot(male, color='#0066ff', bins = range(15,75,5), kde = True)
plt.title("Male age distribution ")

plt.subplot(1,2,2)
sns.histplot(female, color = '#D4D404', bins = range(15,75,5), kde = True)
plt.title("Female age distribution");
plt.text(-25,-5,f"Then mean age of male is {round(male.mean(),1)}, and the female is {round(female.mean(),1)}")

plt.show()

"""# Distribution of age with respect to gender"""

fig,ax=plt.subplots(2,figsize=(5,10))
sns.scatterplot(ax=ax[0],data=df,x='Age',y='Spending Score (1-100)',hue='Gender')
sns.scatterplot(ax=ax[1],data=df,x='Annual Income (k$)',y='Spending Score (1-100)',hue='Gender')
plt.show()

df['Age_Group'] = pd.cut(df.Age, bins = [18, 25, 35, 45, 55, 65, 70], labels = ['18-24', '25-34', '35-44', '45-54', '55-64', '65-70'])

plt.figure(figsize = (8, 8))
plt.pie(df.Age_Group.value_counts(), labels = df.Age_Group.value_counts().index, autopct='%1.1f%%')
plt.title('Distribution of Age Groups')
plt.legend(['18-24', '25-34', '35-44', '45-54', '55-64', '65-70'])
plt.show()

"""# Spending Score by age group

"""

km=KMeans(n_clusters=5)
df['cluster']=km.fit_predict(df[['Annual Income (k$)','Spending Score (1-100)']])

df.head()

km.cluster_centers_

km.inertia_

df['cluster'].unique()

df0=df[df['cluster']==0][['Annual Income (k$)','Spending Score (1-100)','cluster']]
df1=df[df['cluster']==1][['Annual Income (k$)','Spending Score (1-100)','cluster']]
df2=df[df['cluster']==2][['Annual Income (k$)','Spending Score (1-100)','cluster']]
df3=df[df['cluster']==3][['Annual Income (k$)','Spending Score (1-100)','cluster']]
df4=df[df['cluster']==4][['Annual Income (k$)','Spending Score (1-100)','cluster']]

sns.scatterplot(data=df0,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df1,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df2,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df3,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df4,x='Annual Income (k$)',y='Spending Score (1-100)')
plt.show()

sse=[]
for k in range(1,20):
    kmk=KMeans(n_clusters=k)
    kmk.fit(df[['Annual Income (k$)','Spending Score (1-100)']])
    sse.append(kmk.inertia_)

sse

sns.lineplot(data=sse)
sns.scatterplot(data=sse)
plt.grid(True)
plt.xlabel('Number of Clusters')
plt.ylabel('Sum of Squared Error')
plt.title('Elbow Chart')
plt.show()

"""#From the above Elbow Chart we can use 5 as number of clusters for better clustering or categorization."""

sns.scatterplot(data=df0,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df1,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df2,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df3,x='Annual Income (k$)',y='Spending Score (1-100)')
sns.scatterplot(data=df4,x='Annual Income (k$)',y='Spending Score (1-100)')
plt.show()

"""#conclusion
Target Audience is the one having Spending Score greater than 60.
We can't decide the Spending Score just based on their Annual Income.
"""

X= df.iloc[:, [3,4]].values

from sklearn.cluster import KMeans
wcss=[]

for i in range(1,11):
    kmeans = KMeans(n_clusters= i, init='k-means++', random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

kmeansmodel = KMeans(n_clusters= 5, init='k-means++', random_state=0)
y_kmeans= kmeansmodel.fit_predict(X)

"""Cluster Visualization"""

plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()



